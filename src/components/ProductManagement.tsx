import React, { useState, useEffect } from "react";
import {
  Table,
  Tag,
  Button,
  Alert,
  Spin,
  Modal,
  Form,
  Input,
  InputNumber,
} from "antd";
import { PlusOutlined, DeleteOutlined, EditOutlined } from "@ant-design/icons";
import "./ProductManagement.css";

// Gi·∫£ ƒë·ªãnh URL backend
const API_URL = "http://localhost:5000/api/products";

interface Product {
  _id: string;
  title: string;
  price: number;
  stock: number;
  description: string;
  thumbnail: string; // URL h√¨nh ·∫£nh
}

const ProductManagement = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [currentProduct, setCurrentProduct] = useState<Product | null>(null);
  const [form] = Form.useForm();

  // --- üéØ H√ÄM G·ªåI API L·∫§Y DANH S√ÅCH S·∫¢N PH·∫®M (ƒê√É TH√äM LOGIC √âP KI·ªÇU) ---
  const fetchProducts = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(API_URL);
      if (!response.ok) {
        throw new Error("L·ªói khi t·∫£i s·∫£n ph·∫©m.");
      }
      const data = await response.json();

      const rawProducts = data.products || data;

      const processedProducts = rawProducts.map((p: any) => ({
        ...p,
        // ‚úÖ ƒê·∫£m b·∫£o price v√† stock lu√¥n l√† s·ªë (0 n·∫øu parse th·∫•t b·∫°i)
        price: p.price ? Number(p.price) : 0,
        stock: p.stock ? Number(p.stock) : 0,
        key: p._id,
      }));

      setProducts(processedProducts);
    } catch (err: any) {
      console.error(err);
      setError("Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m. Vui l√≤ng ki·ªÉm tra API Server.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  // --- üéØ H√ÄM X·ª¨ L√ù TH√äM / C·∫¨P NH·∫¨T S·∫¢N PH·∫®M (ƒê√É TH√äM LOGIC √âP KI·ªÇU TR∆Ø·ªöC KHI G·ª¨I) ---
  const handleFormSubmit = async (values: Product) => {
    setLoading(true);
    try {
      const url = isEditMode ? `${API_URL}/${currentProduct?._id}` : API_URL;
      const method = isEditMode ? "PUT" : "POST";

      // ‚úÖ √âp ki·ªÉu gi√° tr·ªã th√†nh s·ªë nguy√™n/s·ªë th·ª±c tr∆∞·ªõc khi g·ª≠i
      const payload = {
        ...values,
        price: Number(values.price),
        stock: Number(values.stock),
      };

      const response = await fetch(url, {
        method: method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(
          `Thao t√°c ${isEditMode ? "c·∫≠p nh·∫≠t" : "th√™m"} th·∫•t b·∫°i.`
        );
      }

      await fetchProducts();
      setIsModalVisible(false);
      setCurrentProduct(null);
      form.resetFields();
    } catch (err: any) {
      Modal.error({ title: "L·ªói", content: err.message });
    } finally {
      setLoading(false);
    }
  };

  // --- H√ÄM X√ìA S·∫¢N PH·∫®M (Gi·ªØ nguy√™n) ---
  const handleDeleteProduct = (productId: string) => {
    Modal.confirm({
      title: "X√°c nh·∫≠n x√≥a",
      content: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?",
      okText: "X√≥a",
      okType: "danger",
      cancelText: "H·ªßy",
      onOk: async () => {
        setLoading(true);
        try {
          const response = await fetch(`${API_URL}/${productId}`, {
            method: "DELETE",
          });
          if (!response.ok) {
            throw new Error("X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i.");
          }
          await fetchProducts();
        } catch (err: any) {
          Modal.error({ title: "L·ªói", content: err.message });
        } finally {
          setLoading(false);
        }
      },
    });
  };

  // --- C·ªòT CHO B·∫¢NG S·∫¢N PH·∫®M (Gi·ªØ nguy√™n) ---
  const columns = [
    {
      title: "·∫¢nh",
      dataIndex: "thumbnail",
      key: "thumbnail",
      render: (url: string) => (
        <img
          src={url}
          alt="SP"
          style={{ width: 50, height: 50, objectFit: "cover", borderRadius: 4 }}
        />
      ),
    },
    {
      title: "T√™n SP",
      dataIndex: "title",
      key: "title",
      render: (text: string) => (
        <strong style={{ color: "#1890ff" }}>{text}</strong>
      ),
    },
    {
      title: "Gi√°",
      dataIndex: "price",
      key: "price",
      render: (price: number) =>
        price ? `${price.toLocaleString("vi-VN")} VND` : "0 VND", // Th√™m ki·ªÉm tra null/undefined
    },
    {
      title: "T·ªìn kho",
      dataIndex: "stock",
      key: "stock",
      render: (stock: number) => (
        <Tag color={stock > 10 ? "green" : stock > 0 ? "orange" : "red"}>
          {stock}
        </Tag>
      ),
    },
    {
      title: "M√¥ t·∫£",
      dataIndex: "description",
      key: "description",
      render: (text: string) => (text ? text.substring(0, 50) + "..." : "N/A"), // Th√™m ki·ªÉm tra null/undefined
    },
    {
      title: "Thao T√°c",
      key: "action",
      render: (_: any, record: Product) => (
        <div style={{ display: "flex", gap: 8 }}>
          <Button
            icon={<EditOutlined />}
            size="small"
            onClick={() => {
              setCurrentProduct(record);
              setIsEditMode(true);
              // form.setFieldsValue(record) s·∫Ω ho·∫°t ƒë·ªông t·ªët v√¨ ch√∫ng ta ƒë√£ √©p ki·ªÉu Number trong fetchProducts
              form.setFieldsValue(record);
              setIsModalVisible(true);
            }}
          >
            S·ª≠a
          </Button>
          <Button
            icon={<DeleteOutlined />}
            size="small"
            danger
            onClick={() => handleDeleteProduct(record._id)}
          >
            X√≥a
          </Button>
        </div>
      ),
    },
  ];

  return (
    <div style={{ padding: "20px" }}>
      <h2 style={{ marginBottom: 20 }}>üì¶ Qu·∫£n L√Ω S·∫£n Ph·∫©m</h2>
      <Button
        type="primary"
        icon={<PlusOutlined />}
        style={{ marginBottom: 16 }}
        onClick={() => {
          setIsEditMode(false);
          setCurrentProduct(null);
          form.resetFields();
          setIsModalVisible(true);
        }}
      >
        Th√™m S·∫£n Ph·∫©m
      </Button>

      {error && (
        <Alert
          message="L·ªói"
          description={error}
          type="error"
          showIcon
          style={{ marginBottom: 20 }}
        />
      )}

      <Table
        columns={columns}
        dataSource={products}
        rowKey="_id"
        pagination={{ pageSize: 10 }}
        loading={loading}
      />

      {/* Modal Th√™m/S·ª≠a S·∫£n ph·∫©m */}
      <Modal
        title={isEditMode ? "S·ª≠a S·∫£n Ph·∫©m" : "Th√™m S·∫£n Ph·∫©m M·ªõi"}
        visible={isModalVisible}
        onCancel={() => setIsModalVisible(false)}
        okText={isEditMode ? "L∆∞u thay ƒë·ªïi" : "Th√™m"}
        onOk={() => form.submit()}
        confirmLoading={loading}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleFormSubmit}
          initialValues={currentProduct || {}}
        >
          <Form.Item
            name="title"
            label="T√™n S·∫£n Ph·∫©m"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m!" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            name="price"
            label="Gi√° (VND)"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p gi√°!" }]}
          >
            {/* InputNumber kh√¥ng c·∫ßn formatter r∆∞·ªùm r√† n·∫øu gi√° tr·ªã ƒë·∫ßu v√†o ƒë√£ l√† s·ªë */}
            <InputNumber style={{ width: "100%" }} min={0} />
          </Form.Item>
          <Form.Item
            name="stock"
            label="T·ªìn kho"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng t·ªìn!" }]}
          >
            <InputNumber style={{ width: "100%" }} min={0} />
          </Form.Item>
          <Form.Item
            name="thumbnail"
            label="URL H√¨nh ·∫£nh"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p URL h√¨nh ·∫£nh!" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item name="description" label="M√¥ t·∫£">
            <Input.TextArea rows={4} />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default ProductManagement;
