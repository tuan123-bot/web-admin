import React, { useState, useEffect } from "react";

// Gi·∫£ ƒë·ªãnh Ant Design ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t. N·∫øu kh√¥ng, thay th·∫ø b·∫±ng HTML c∆° b·∫£n.
import { Table, Tag, Button, Alert, Spin, Descriptions, Modal } from "antd";
import "./OrderManagement.css"; // T√πy ch·ªçn: t·∫°o file CSS n·∫øu c·∫ßn

// ƒê·ªãnh nghƒ©a URL Backend c·ªßa b·∫°n
// V√ç D·ª§: C·∫ßn thay th·∫ø b·∫±ng ƒë·ªãa ch·ªâ server th·ª±c t·∫ø c·ªßa b·∫°n
const API_URL = "http://localhost:5000/api/orders";

// --- ƒê·ªäNH NGHƒ®A KI·ªÇU D·ªÆ LI·ªÜU ƒê∆†N H√ÄNG ---
interface Order {
  _id: string; // ID ƒë∆°n h√†ng
  customerName: string;
  customerPhone: string;
  deliveryAddress: string;
  totalAmount: number;
  paymentMethod: string;
  status: "Pending" | "Confirmed" | "Shipped" | "Cancelled";
  timestamp: string;
  items: { title: string; price: number }[];
}

const OrderManagement = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);

  // üéØ 1. H√ÄM G·ªåI API L·∫§Y DANH S√ÅCH ƒê∆†N H√ÄNG
  const fetchOrders = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(API_URL);
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "L·ªói khi t·∫£i ƒë∆°n h√†ng.");
      }
      const data = await response.json();

      // ‚úÖ Gi·∫£ ƒë·ªãnh server tr·∫£ v·ªÅ m·∫£ng ƒë∆°n h√†ng TR·ª∞C TI·∫æP
      // N·∫øu server tr·∫£ v·ªÅ { data: [...] }, b·∫°n d√πng: setOrders(data.data);
      // Ch√∫ng ta c·∫ßn th√™m tr∆∞·ªùng 'key' cho Ant Design Table (n·∫øu c·∫ßn)
      const processedOrders = (data.orders || data).map((order: Order) => ({
        ...order,
        key: order._id,
      }));

      setOrders(processedOrders);
    } catch (err: any) {
      console.error(err);
      setError("Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng. Vui l√≤ng ki·ªÉm tra API Server.");
    } finally {
      setLoading(false);
    }
  };

  // üéØ 2. H√ÄM C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI ƒê∆†N H√ÄNG
  const updateOrderStatus = async (
    orderId: string,
    newStatus: Order["status"]
  ) => {
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/${orderId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) {
        throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i. Server kh√¥ng ph·∫£n h·ªìi OK.");
      }

      // C·∫≠p nh·∫≠t th√†nh c√¥ng, t·∫£i l·∫°i danh s√°ch ƒë∆°n h√†ng
      fetchOrders();
    } catch (err: any) {
      alert("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + err.message);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  // H√†m hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng
  const showOrderDetails = (order: Order) => {
    setSelectedOrder(order);
    setIsModalVisible(true);
  };

  // --- C·ªòT CHO B·∫¢NG DANH S√ÅCH ƒê∆†N H√ÄNG ---
  const columns = [
    {
      title: "M√£ ƒêH",
      dataIndex: "_id",
      key: "_id",
      render: (text: string) => (
        <a
          onClick={() => showOrderDetails(orders.find((o) => o._id === text)!)}
        >
          {text.substring(0, 8)}...
        </a>
      ),
    },
    {
      title: "Kh√°ch H√†ng",
      dataIndex: "customerName",
      key: "customerName",
    },
    {
      title: "T·ªïng Ti·ªÅn",
      dataIndex: "totalAmount",
      key: "totalAmount",
      render: (amount: number) => `${amount.toLocaleString("vi-VN")} VND`,
    },
    {
      title: "Tr·∫°ng Th√°i",
      dataIndex: "status",
      key: "status",
      render: (status: Order["status"]) => {
        let color = "gold";
        if (status === "Confirmed") color = "blue";
        if (status === "Shipped") color = "green";
        if (status === "Cancelled") color = "red";
        return <Tag color={color}>{status}</Tag>;
      },
    },
    {
      title: "Thao T√°c",
      key: "action",
      render: (_: any, record: Order) => (
        <div style={{ display: "flex", gap: 5 }}>
          <Button
            type="primary"
            size="small"
            disabled={record.status !== "Pending"}
            onClick={() => updateOrderStatus(record._id, "Confirmed")}
          >
            X√°c Nh·∫≠n
          </Button>
          <Button
            type="default"
            size="small"
            danger
            disabled={
              record.status === "Cancelled" || record.status === "Shipped"
            }
            onClick={() => updateOrderStatus(record._id, "Cancelled")}
          >
            H·ªßy
          </Button>
        </div>
      ),
    },
  ];

  return (
    <div style={{ padding: "20px" }}>
      <h2 style={{ marginBottom: 20 }}>Qu·∫£n L√Ω ƒê∆°n H√†ng</h2>

      {loading && (
        <Spin
          tip="ƒêang t·∫£i d·ªØ li·ªáu..."
          size="large"
          style={{ display: "block", margin: "20px auto" }}
        />
      )}
      {error && (
        <Alert
          message="L·ªói"
          description={error}
          type="error"
          showIcon
          style={{ marginBottom: 20 }}
        />
      )}

      <Table
        columns={columns}
        dataSource={orders}
        rowKey="_id"
        pagination={{ pageSize: 10 }}
        loading={loading}
      />

      {/* Modal Chi ti·∫øt ƒë∆°n h√†ng */}
      {selectedOrder && (
        <Modal
          title={`Chi ti·∫øt ƒê∆°n h√†ng: ${selectedOrder._id.substring(0, 10)}...`}
          visible={isModalVisible}
          onCancel={() => setIsModalVisible(false)}
          footer={[
            <Button key="close" onClick={() => setIsModalVisible(false)}>
              ƒê√≥ng
            </Button>,
          ]}
        >
          <Descriptions bordered column={1} size="small">
            <Descriptions.Item label="Kh√°ch h√†ng">
              {selectedOrder.customerName}
            </Descriptions.Item>
            <Descriptions.Item label="SƒêT">
              {selectedOrder.customerPhone}
            </Descriptions.Item>
            <Descriptions.Item label="ƒê·ªãa ch·ªâ">
              {selectedOrder.deliveryAddress}
            </Descriptions.Item>
            <Descriptions.Item label="P.Th·ª©c TT">
              {selectedOrder.paymentMethod}
            </Descriptions.Item>
            <Descriptions.Item label="T·ªïng ti·ªÅn">
              {selectedOrder.totalAmount.toLocaleString("vi-VN")} VND
            </Descriptions.Item>
            <Descriptions.Item label="Tr·∫°ng th√°i">
              <Tag
                color={selectedOrder.status === "Confirmed" ? "blue" : "gold"}
              >
                {selectedOrder.status}
              </Tag>
            </Descriptions.Item>
          </Descriptions>

          <h4 style={{ marginTop: 15 }}>S·∫£n ph·∫©m:</h4>
          <Table
            dataSource={selectedOrder.items}
            columns={[
              { title: "T√™n SP", dataIndex: "title" },
              {
                title: "Gi√°",
                dataIndex: "price",
                render: (p: number) => `${p.toLocaleString("vi-VN")} VND`,
              },
            ]}
            pagination={false}
            size="small"
            rowKey="title" // Gi·∫£ ƒë·ªãnh t√™n s·∫£n ph·∫©m l√† duy nh·∫•t trong ƒë∆°n h√†ng
          />
        </Modal>
      )}
    </div>
  );
};

export default OrderManagement;
